package com.uwbhome.pm.interceptor;

import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.uwbhome.pm.security.AuthenticationInterface;
import com.uwbhome.pm.security.SessionProvider;
import com.uwbhome.pm.utils.RtleRequestUtils;
import com.uwbhome.pm.utils.RtleUser;

/**
 * CMS上下文信息拦截器
 * 
 * 包括登录信息、权限信息、站点信息
 */
public class AdminContextInterceptor extends HandlerInterceptorAdapter {
	private static final Logger log = Logger
			.getLogger(AdminContextInterceptor.class);

	@Override
	public boolean preHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler) throws Exception {
		System.out.println("测试：preHandle  "+request.getRequestURL() );
		// 获得用户
		RtleUser user = null;
		// 正常状态
		//查看session中是否存在该用户
		Integer userId = authMng.retrieveUserIdFromSession(session, request);
		
		// 此时用户可以为null
		RtleRequestUtils.setUser(request, user);
//		String uri = getURI(request);
//		// 不在验证的范围内
//		if (exclude(uri)) {
//			return true;
//		}
		// 用户为null跳转到登陆页面
		if (userId == null) {
			response.sendRedirect(getLoginUrl(request));
			return false;
		}
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request,
			HttpServletResponse response, Object handler, ModelAndView mav)
			throws Exception {
		System.out.println("测试：postHandle");
	}

	@Override
	public void afterCompletion(HttpServletRequest request,
			HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.out.println("测试：afterCompletion");
	}

	private String getLoginUrl(HttpServletRequest request) {
		StringBuilder buff = new StringBuilder();
		if (loginUrl.startsWith("/")) {
			String ctx = request.getContextPath();
			if (!StringUtils.isBlank(ctx)) {
				buff.append(ctx);
			}
		}
		buff.append(loginUrl).append("?");
//		buff.append(RETURN_URL).append("=").append(returnUrl);
//		if (!StringUtils.isBlank(processUrl)) {
//			buff.append("&").append(PROCESS_URL).append("=").append(
//					getProcessUrl(request));
//		}
		return buff.toString();
	}

	private String getProcessUrl(HttpServletRequest request) {
		StringBuilder buff = new StringBuilder();
		if (loginUrl.startsWith("/")) {
			String ctx = request.getContextPath();
			if (!StringUtils.isBlank(ctx)) {
				buff.append(ctx);
			}
		}
		buff.append(processUrl);
		return buff.toString();
	}

	/**
	 * 按参数、cookie、域名、默认。
	 * 
	 * @param request
	 * @return 不会返回null，如果站点不存在，则抛出异常。
	 */
//	private CmsSite getSite(HttpServletRequest request,
//			HttpServletResponse response) {
//		CmsSite site = getByParams(request, response);
//		if (site == null) {
//			site = getByCookie(request);
//		}
//		if (site == null) {
//			site = getByDomain(request);
//		}
//		if (site == null) {
//			site = getByDefault();
//		}
//		if (site == null) {
//			throw new RuntimeException("cannot get site!");
//		} else {
//			return site;
//		}
//	}

//	private CmsSite getByParams(HttpServletRequest request,
//			HttpServletResponse response) {
//		String p = request.getParameter(SITE_PARAM);
//		if (!StringUtils.isBlank(p)) {
//			try {
//				Integer siteId = Integer.parseInt(p);
//				CmsSite site = cmsSiteMng.findById(siteId);
//				if (site != null) {
//					// 若使用参数选择站点，则应该把站点保存至cookie中才好。
//					CookieUtils.addCookie(request, response, SITE_COOKIE, site
//							.getId().toString(), null, null);
//					return site;
//				}
//			} catch (NumberFormatException e) {
//				log.warn("param site id format exception", e);
//			}
//		}
//		return null;
//	}

//	private CmsSite getByCookie(HttpServletRequest request) {
//		Cookie cookie = CookieUtils.getCookie(request, SITE_COOKIE);
//		if (cookie != null) {
//			String v = cookie.getValue();
//			if (!StringUtils.isBlank(v)) {
//				try {
//					Integer siteId = Integer.parseInt(v);
//					return cmsSiteMng.findById(siteId);
//				} catch (NumberFormatException e) {
//					log.warn("cookie site id format exception", e);
//				}
//			}
//		}
//		return null;
//	}

	private boolean exclude(String uri) {
		if (excludeUrls != null) {
			for (String exc : excludeUrls) {
				if (exc.equals(uri)) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean permistionPass(String uri, Set<String> perms,
			boolean viewOnly) {
		String u = null;
		int i;
		for (String perm : perms) {
			if (uri.startsWith(perm)) {
				// 只读管理员
				if (viewOnly) {
					// 获得最后一个 '/' 的URI地址。
					i = uri.lastIndexOf("/");
					if (i == -1) {
						throw new RuntimeException("uri must start width '/':"
								+ uri);
					}
					u = uri.substring(i + 1);
					// 操作型地址被禁止
					if (u.startsWith("o_")) {
						return false;
					}
				}
				return true;
			}
		}
		return false;
	}

	private SessionProvider session;
	private AuthenticationInterface authMng;
	
	
	private boolean auth = true;
	private String[] excludeUrls;

	private String loginUrl;
	private String processUrl;
	private String returnUrl;

	@Autowired
	public void setSession(SessionProvider session) {
		this.session = session;
	}

	

	

	@Autowired
	public void setAuthMng(AuthenticationInterface authMng) {
		this.authMng = authMng;
	}

	public void setAuth(boolean auth) {
		this.auth = auth;
	}

	public void setExcludeUrls(String[] excludeUrls) {
		this.excludeUrls = excludeUrls;
	}

	public void setLoginUrl(String loginUrl) {
		this.loginUrl = loginUrl;
	}

	public void setProcessUrl(String processUrl) {
		this.processUrl = processUrl;
	}

	public void setReturnUrl(String returnUrl) {
		this.returnUrl = returnUrl;
	}

}