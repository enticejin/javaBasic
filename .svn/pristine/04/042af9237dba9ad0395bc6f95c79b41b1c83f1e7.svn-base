package com.uwbhome.pm.controller;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.uwbhome.pm.utils.Page;
import com.uwbhome.pm.utils.PageData;
import com.uwbhome.rtle.api.*;

/**
   *  时钟源
 * @author xu.yuanli
 *
 */
@Controller
@RequestMapping("/clocksource")
public class ClockSourecController extends BaseController{
	 //时钟源列表
	@RequestMapping(value="cslist.do")
	public ModelAndView list(Page page)
	{
		int currentPage = 0;
		List<ClockSource> clocksouurceList=new ArrayList<ClockSource>();
		//从api获取文件数据
		clocksouurceList.addAll(ClockSources.getInstance().getList().values());
		//获取分页数据
		List<ClockSource> clocksourceListPage=getCurrentPageData(clocksouurceList,currentPage,this.pageSize);
		
		page.setTotalResult(clocksouurceList.size());
		page.setTotalPage(page.getTotalPage());
		page.setCurrentPage(currentPage);
		page.setShowCount(this.pageSize);
		page.setCurrentPage(page.getCurrentPage());
		ModelAndView mv = this.getModelAndView();
		mv.setViewName("clocksource_list");
		PageData pd = this.getPageData();;
	
		mv.addObject("varList", clocksourceListPage);
		mv.addObject("pd", pd);
		return mv;
	}
	//删除时钟
	@RequestMapping(value="/delete.do")
	@ResponseBody
	public Object deleteArea(){
		PageData pd=getPageData();
		String clockSourceId=pd.get("clockSourceId").toString();	 
		List<Area> areaListAll=new ArrayList<Area>();
		areaListAll.addAll(Areas.getInstance().getList().values());
		String zhong = "";
		for (int i = 0; i < areaListAll.size(); i++) {
			String shizhong = areaListAll.get(i).getClockSource().getId();
			if (clockSourceId.equals(shizhong)) {
				zhong += ','+areaListAll.get(i).getName();
			}
		}
		PageData pd1=new PageData();
		if (zhong=="") {
			ClockSources.getInstance().remove(clockSourceId);
			pd1.put("status", "ok");
			pd1.put("msg", "删除成功");
		}else {
			pd1.put("zhong", zhong.substring(1));
		}
		
		return pd1;
	}
	//修改时钟坐标
	@RequestMapping(value = "/setXYZ.do")
	@ResponseBody
	public Object setAnchorXYZ() {
		PageData pd = new PageData();
		PageData retpd = new PageData();
		pd = this.getPageData();
		String csWebId = pd.getString("id");
		if(csWebId==null)
		{
			return "";
		}
		double x = Double.parseDouble(pd.getString("x"));
		double y = Double.parseDouble(pd.getString("y"));
		double z = Double.parseDouble(pd.getString("z"));
		
		ClockSource cs=ClockSources.getInstance().get(csWebId);
		if(cs!=null)
		{
			cs.setX(x);
			cs.setY(y);
			cs.setZ(z);
			cs.save();
			retpd.put("status", "ok");
			retpd.put("msg", "操作成功");
			
		}else
		{
			retpd.put("status", "err");
			retpd.put("msg", "操作失败");
		}
		return retpd;
	} 
	/**
	 * 返回分页数据
	 * @param usfilesList
	 * @param currentPage
	 * @param showCount
	 * @return
	 */
	public List<ClockSource> getCurrentPageData(List<ClockSource> clockList,int currentPage,int showCount)
	{
		// 排序
		Collections.sort(clockList, new Comparator<ClockSource>() {
							@Override
							public int compare(ClockSource c1, ClockSource c2) {
								return c1.getName().compareTo(c2.getName());
							}
						});
		//分页
		List<ClockSource> csListPage = new ArrayList<ClockSource>();
				int currIdx = (currentPage > 1 ? (currentPage - 1) * showCount : 0);
				for (int i = 0; i < showCount && i < clockList.size() - currIdx; i++) {
					ClockSource bmap = clockList.get(currIdx + i);
					csListPage.add(bmap);
				}
		return csListPage;
				
	}
}
